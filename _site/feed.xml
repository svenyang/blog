<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>记录下一些琐碎的事情</title>
    <description>...</description>
    <link>http://www.svenyang.com/</link>
    <atom:link href="http://www.svenyang.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 08 Sep 2021 23:23:19 +0800</pubDate>
    <lastBuildDate>Wed, 08 Sep 2021 23:23:19 +0800</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>认知的提升以及工作</title>
        <description>&lt;h1 id=&quot;自我的认知&quot;&gt;自我的认知&lt;/h1&gt;
&lt;p&gt;今天是2021年8月1日，从去年年底到现在，发生了很多事情。事件驱动，才是最快的成长方式，半年承担了太多的压力，经历了太多的变化，有了很大的认知上的变化，由原来的不自知，无法诊断，现在也能看到自我的短板。不论是从家庭、个人工作以及管理能力，都看到的不足&lt;/p&gt;

&lt;h2 id=&quot;家庭&quot;&gt;家庭&lt;/h2&gt;
&lt;p&gt;家庭这个词，先把两个字进行解读&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;家，宝盖头下面一个涿，宝盖头表示房屋，涿表示家畜祭品（也有养殖的含义）。就是能在一个固定的场所祭祀先人，代表一种责任。中国人崇尚祖先崇拜，将祭祀看的非常重要，尤其是带着后代进行祭祀，代代相传&lt;/li&gt;
  &lt;li&gt;庭，表示院子。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;两个字组合在一起，就是对祖先的一种承诺，用自己的肩膀承担起责任，不论是遮风挡雨，还是教育下一代，需要更多的付出，而不是仅自我承担。人在慢慢长大，三十而立，四十不惑。或许，我也是到了不惑的年龄，少了年少的轻狂，事情一件件的都能够想通，慢慢的开始豁达，也越来越多的承担责任，重担&lt;/p&gt;

&lt;h2 id=&quot;个人工作--leadership&quot;&gt;个人工作 &amp;amp; LeaderShip&lt;/h2&gt;
&lt;p&gt;谈到工作，职责的范围，以及思想上的变化。从腾讯出来已经由5年的时间了，身上刻满了腾讯的烙印。这种烙印，一方面包含了对事项的承诺，使命必达；另一方面，管理上类似于包工头，或者是人力外包&lt;/p&gt;

&lt;p&gt;工作内容的承诺，腾讯人都能做到使命必达，战斗力都会比较强悍。尤其是研发，是从一线的开发晋升上来的，拿到项目的第一反应，往往都是自己拆解，这个事情该如何做，项目的节奏以及关键事项。但，这个优点在晋升以后，又变成非常大的绊脚石，因为有管理这顶帽子在头上，需要做非常大的角色转变，由个人贡献者（IC）变成通过团队完成工作，角色转变带来的认知变化需要非常大。尽管，14年就对我进行任命，但角色的转变并么有那么彻底，也一直处于事情需要自己拆解，自我心里才会更加的舒坦。这也是自我的舒适区&lt;/p&gt;

&lt;p&gt;而，当我从一线的管理者成长为二线管理者时，原来看似还好的问题，需要刻不容缓的解决，而该问题绝对阻碍的我向上的发展与晋升&lt;/p&gt;

&lt;p&gt;至于在腾讯的研发包工头角色，R&amp;amp;D线与产品线完全是独立的两个部门。而我一直在不断的跟进业务提出的各种需求，缺少了自我沉淀与思考。常规的工作内容一般是，1需求提出，2仔细评估需求与制定方案，3安排人力跟进。这1、2、3点不断的反复，填满了我在腾讯承担管理工作的那几年时光。&lt;/p&gt;

&lt;p&gt;管理，也并不是仅仅如此。&lt;/p&gt;

&lt;p&gt;在徐波来了快手以后，与之对比，个人缺点暴露的更加明显。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;规划能力&lt;br /&gt;
  需求以外，要有自我的沉淀，尤其是做事情要有规划，而不仅仅是看到需求，做一个包工头。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;问题抽象能力&lt;br /&gt;
  高阶的管理者，与低阶管理者最大的差异在于，将复杂问题简单化，抽象化，形成一个个的概念。概念会让问题更加容易理解，以及容易更好的跟进。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;认知管理的提升&quot;&gt;认知管理的提升&lt;/h1&gt;
&lt;p&gt;近期看了几本不错的书籍，其中 陈春花的《认知管理》，给了我最深刻的印象&lt;/p&gt;

&lt;p&gt;我自己的认知，也是经过了几个阶段，现在，感觉管理能力更加的细腻，有章法和节奏（虽然还有很多的问题）&lt;/p&gt;

&lt;h2 id=&quot;时间管理&quot;&gt;时间管理&lt;/h2&gt;
&lt;p&gt;时间上，有无法偷懒以及不能偷懒的认知。需要利用好自己的每一块时间，既要避免时间被分散，也要克制住刷手机的各种冲动
大块的时间需要被用于细致的思考，深入细节，需要有目标，不断的拆解形成核心的关键事项
零散的时间，微观式体验内部的产品，以及看相关的监控视图，做出局部的思考&lt;/p&gt;

&lt;p&gt;但，还是自我有较多的惰性，还是存在拖延症&lt;/p&gt;

&lt;h2 id=&quot;项目的管理&quot;&gt;项目的管理&lt;/h2&gt;
&lt;p&gt;放弃只管大方向的幻想&lt;br /&gt;
项目的管理，其实就要做好流程的管理、全责的管理。
对于每一个小项目，需要自己或者帮助团队明确可衡量的目标，制定关键事项，以及最重要的，执行路径。曾经，在目标制定上还做得不错，但执行路径没有细跟，导致了项目的失败。换句话说，没有做到知行合一，在行动的时候，需要考虑到落地的困难从而制定出可落地的路径&lt;/p&gt;

&lt;p&gt;有个项目的管理模型，会比较适用。即OGSM-T工作法&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;目的（Objectives）
 要确认你的方向是什么，你需要达成什么。通常长期的时间框架（4年）；通常指一个领域或者两个领域，并且对核心领域做出质的描述；目的通常来自自我创立、方向指引和使命定位&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;目标（Goals）&lt;br /&gt;
 对目的的量化指标，要求是明确的，可量化的，可实现并且和目的一致。目标要求遵循SMART原则&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;策略（Strategies）&lt;br /&gt;
 指怎样达成目标。“策略”通常包括所用工作、核心事务以及关键成功要素&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;衡量指标（Measures）&lt;br /&gt;
 关心什么就衡量什么&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;行动方案（Tactics）&lt;br /&gt;
 步骤：所有为达到目标必须要做的事
 责任：每一个步骤由谁负责
 支持：期望什么样及获得谁的帮助
 时间：每个步骤的开始及完成时间，或者流程顺序
 每月评估：追踪进度&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;OGSM-T就是一套完整的项目管理框架，利用这套框架，能达到一个很好的项目管理以及推动，达成目标的概率就会非常大&lt;/p&gt;

&lt;h2 id=&quot;组织的管理&quot;&gt;组织的管理&lt;/h2&gt;

&lt;p&gt;谈起组织的管理，一般都会认为是选用育留。当代的管理方式和传统，差异非常大。从传统的管控式管理，变为现在的激励式管理，需要充分的激发每个员工的能力以及意愿。比如，设立主R及授权，让员工自行跟进及拆解项目，而你，需要紧跟着项目，在需要的点上介入，避免风险失控&lt;/p&gt;

&lt;p&gt;或许，组织的管理更多的是权责管理，调整组织结构，让权责更加清晰，避免相互干扰及踩脚&lt;/p&gt;
</description>
        <pubDate>Sat, 31 Jul 2021 00:00:00 +0800</pubDate>
        <link>http://www.svenyang.com/2021/07/31/about_work/</link>
        <guid isPermaLink="true">http://www.svenyang.com/2021/07/31/about_work/</guid>
        
        <category>随笔</category>
        
        
      </item>
    
      <item>
        <title>今天的哀悼</title>
        <description>&lt;h2 id=&quot;曾经的哀悼&quot;&gt;曾经的哀悼&lt;/h2&gt;

&lt;p&gt;十几年前，在汶川大地震以后，那时是我经历的第一次全国哀悼&lt;/p&gt;

&lt;p&gt;现在我还记得一些情形，站在办公室里，从窗户看下下面的街道，每个人都停下来站在街旁，汽车都已经停驶靠在路边，西安的防空警报响起，伴随着汽车的鸣笛声，整个世界只剩下这一种声音；&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://sven-blog.oss-cn-shanghai.aliyuncs.com/2020-04-04/timg_2020-04-04.jpeg&quot; alt=&quot;图片&quot; /&gt;
还记得那时Google的搜索剧烈波动的图片；还记得地震时墙壁的裂开，跑下楼梯时从天花板上掉落的石膏块，每个人都在尖叫；还记得每个人都惊慌失措，不知道哪里发生的地震，手机彻底无法打出去电话；还记得从宿舍取出收音机时，能听到广播说汶川地震，我很茫然，不知道汶川是哪里。。。。还记得很多很多&lt;/p&gt;

&lt;h2 id=&quot;今年今日&quot;&gt;今年今日&lt;/h2&gt;

&lt;p&gt;今天清明节，再次的哀悼日，为还未结束疫情却已经消逝的人们哀悼；今天娱乐活动暂停和取消，Twitter上有个推友说的很好，至少现在的人还有打游戏的权利，只不过是停掉了一天，而那些已经逝去的人永远也无法拿起手机或游戏机。。。&lt;/p&gt;

&lt;p&gt;疫情在继续，不知道什么时候是头&lt;/p&gt;

&lt;p&gt;不想说鼓励的话，只想好好的活着，不枉费时光，不蹉跎岁月&lt;/p&gt;

&lt;h2 id=&quot;孤独&quot;&gt;孤独&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;一个人静静靠在沙发，回想起那年你对我说的话&lt;br /&gt;
当初我们的心，已慢慢分离啦&lt;br /&gt;
现，在只想问你还好吗&lt;br /&gt;
记得我们拥抱着哭的夜晚，在我心里留下那一道疤&lt;br /&gt;
只能怪我当初犯傻，怪我没能听家里话&lt;br /&gt;
走到今，天这一步&lt;br /&gt;
全都是我命啊，我也不想这样难过&lt;br /&gt;
我也不想这样蹉跎，我们之间已没有了&lt;br /&gt;
当初的承诺，我一个人独自生活&lt;br /&gt;
我也不想对谁诉说，烟酒不离就是现&lt;br /&gt;
在的我，当我再一次走到你的身边&lt;br /&gt;
我们都已不再是当初的容颜，你现&lt;br /&gt;
在满脸的敷衍，半点不像从前&lt;br /&gt;
觉得自己可笑又可怜，不愿再去重蹈覆辙&lt;br /&gt;
也不再去相互折磨，事到如今&lt;br /&gt;
我也习惯了一个人生活，我会继续这样洒脱&lt;br /&gt;
我会找到曾经的我，孤独真的让我好难过&lt;br /&gt;
我也不想这样难过，我也不想这样蹉跎&lt;br /&gt;
我们之间已没有了，当初的承诺&lt;br /&gt;
我一个人独自生活，我也不想对谁诉说&lt;br /&gt;
烟酒不离就是现，在的我&lt;br /&gt;
请你别再这样难过，也不要再继续蹉跎&lt;br /&gt;
我们之间已没有了，当初的承诺&lt;br /&gt;
享受一个人的生活，也不要再对谁诉说&lt;br /&gt;
孤独不会让你失去自我，孤独不会让你失去自我&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sun, 08 Mar 2020 00:00:00 +0800</pubDate>
        <link>http://www.svenyang.com/2020/03/08/rip/</link>
        <guid isPermaLink="true">http://www.svenyang.com/2020/03/08/rip/</guid>
        
        <category>随笔</category>
        
        
      </item>
    
      <item>
        <title>魔幻的2020</title>
        <description>&lt;p&gt;2020年以魔幻的方式开始，一切都那么不可思议&lt;/p&gt;

&lt;h1 id=&quot;开始的疫情&quot;&gt;开始的疫情&lt;/h1&gt;

&lt;p&gt;在我们还在准备春节项目的活动时，新闻上就能看到关于疫情的信息，从1月中旬的出现不明原因的肺炎，到谣传SARS重现，有限人传人，最终到钟南山说的人传人。在不经意间事情就这么发生了&lt;/p&gt;

&lt;p&gt;北京的我们，从最开始将这个事情当做新闻来看，没有感受到当年SARS的那种紧张，因为SARS肆虐的时候还在大学中，互联网也没有那么发达，对SARS没什么概念。而这次疫情，就跟H1N1、新加坡传播的蚊虫病，有的时候广播报纸一直在说，但感觉离自己很遥远。还在和同事打趣，1月份大奔开进紫禁城，网友说是冲撞了龙脉，可逐渐的，情况越来越差&lt;/p&gt;

&lt;p&gt;在1月20的时候，想了想家里还是有比较多的口罩（以前带小朋友去医院时买了很多医用口罩）以及应对北京雾霾买的霍尼韦尔N95口罩，口罩上感觉不怎么紧张，只在21号给女儿下单买了一些儿童口罩。到了22号的时候，去公司对面楼下的药店购买医用口罩时，被告知缺货，也就没怎么在意买了点酒精棉片就离开了。23日再去的时候，药店已经关门，自此以后，购买口罩就只能去手机APP上抢购了&lt;/p&gt;

&lt;h1 id=&quot;封闭的城市&quot;&gt;封闭的城市&lt;/h1&gt;

&lt;p&gt;1月23日，武汉开始封闭，严禁出入，北京那个时候还没什么动静。令人疑惑的是，在过完春节以后，北京逐步的严格，或许是严防回京返工带来的疫情传播&lt;/p&gt;

&lt;p&gt;先是小区的出入口开始逐渐关闭，只剩下一两个，随后出入口开始贴上非本小区人员车辆禁止入内，再过几天变成了测量体温，而在2月底的时候出入证才姗姗来迟，但到目前为止，还未限制出行的次数和天数&lt;/p&gt;

&lt;p&gt;前几天带着相机的时候拍了下附近小区的门口
&lt;img src=&quot;https://sven-blog.oss-cn-shanghai.aliyuncs.com/2020-03-08/IMG_3752.JPG&quot; alt=&quot;小区门口&quot; /&gt;&lt;/p&gt;

&lt;p&gt;经常去的超市也是一样的魔幻，前几天还能从多个出入口进出，后来就改成了一个最远的出入口😿&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://sven-blog.oss-cn-shanghai.aliyuncs.com/2020-03-08/IMG_3756.JPG&quot; alt=&quot;蓝蓝的天&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2月底还空空如也的街道，尽管这是周末的下午
&lt;img src=&quot;https://sven-blog.oss-cn-shanghai.aliyuncs.com/2020-03-08/WechatIMG21.jpeg&quot; alt=&quot;空挡的接到&quot; /&gt;&lt;/p&gt;

&lt;p&gt;开了又关闭的餐厅，以及超市被抢光的蔬菜。。。无图&lt;/p&gt;

&lt;p&gt;最初的几天，超市是买不到黄瓜和土豆的，方便面的货架上早已是空空如也，找不到我最爱吃的拉面🍜。但堆成山的冰糖橘还是有很多人围在一起挑选，后来超市就改成了预先装好袋子，不能自己挑选。3月初，我最喜欢的洽洽瓜子没有了~~，一直没有补货。。。。。。。。。。&lt;strong&gt;神一般的逻辑&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;北京的天气&quot;&gt;北京的天气&lt;/h1&gt;

&lt;p&gt;17、18和19年，北京没怎么下过雪，可在2020年初，下了好几场的大雪，可无人有心情再去紫禁城拍雪景了。北京的天气没有想象中的一直是晴朗，或者是干净透亮，而是有的时候大雾或者重度污染，比如今天，雾+中度污染+小雨，从窗户往外望去，压抑的天气给人更阴沉的感觉，昨天的天气还非常的好&lt;/p&gt;

&lt;p&gt;2月底周末的下午，去了趟奥林匹克森林公园南园，趁着黄昏，拿手机拍了两张照片
&lt;img src=&quot;https://sven-blog.oss-cn-shanghai.aliyuncs.com/2020-03-08/WechatIMG24.jpeg&quot; alt=&quot;黄昏&quot; /&gt;
&lt;img src=&quot;https://sven-blog.oss-cn-shanghai.aliyuncs.com/2020-03-08/WechatIMG25.jpeg&quot; alt=&quot;林荫的黄昏&quot; /&gt;&lt;/p&gt;

&lt;p&gt;天气好，被憋了很久的人集体出来撒欢，随后第二天媒体又铺天盖地的劝人继续封闭，不要去景点&lt;/p&gt;

&lt;h1 id=&quot;工作&quot;&gt;工作&lt;/h1&gt;

&lt;p&gt;集中办公的时间不断的延长，随后又按照北京市的要求，集中办公的人数不能超过总人数的一定比例。上周去公司办公了一天，人很少，我们这层的到岗人数应该低于10%，下周去公司估计不会差别很大，还是人少&lt;/p&gt;

&lt;p&gt;一个月在家上班，沟通效率变得比较差，就只有经常电话会议，反复沟通，确保理解一致。尤其是过完年的时候，大量的工作需要启动，每天就陷入了文山会海中&lt;/p&gt;

&lt;p&gt;贴几张公司的照片（转载自腾讯新闻：https://xw.qq.com/cmsid/20200302A0IQUW00）
&lt;img src=&quot;https://inews.gtimg.com/newsapp_bt/0/11397079065/641&quot; alt=&quot;电梯按钮抽纸&quot; /&gt;
&lt;img src=&quot;https://inews.gtimg.com/newsapp_bt/0/11397079066/641&quot; alt=&quot;电梯格子&quot; /&gt;
&lt;img src=&quot;https://inews.gtimg.com/newsapp_bt/0/11397079067/641&quot; alt=&quot;吃饭神器&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;最后&quot;&gt;最后&lt;/h1&gt;

&lt;p&gt;希望疫情能得到控制，人类也能更多的反思自己，在2020年到现在的日子里，牛鬼蛇神以此登场，新闻报道铺天盖地，人更需要拥有自己的判断力和觉察力，不能迷失在别人的视角和思路中。尤感这次的各种词语“硬核”、“抄作业”、“美国屯qiang”，以及无畏的批判&lt;/p&gt;
</description>
        <pubDate>Sun, 08 Mar 2020 00:00:00 +0800</pubDate>
        <link>http://www.svenyang.com/2020/03/08/2020/</link>
        <guid isPermaLink="true">http://www.svenyang.com/2020/03/08/2020/</guid>
        
        <category>随笔</category>
        
        
      </item>
    
      <item>
        <title>数仓</title>
        <description>&lt;p&gt;现在的工作内容，已经由服务端转换为了数据分析产品，对我来说，挑战很大，原有的知识体系需要进行完全的更新，而不是简单的在原有基础上加深和加固。但这个新的选择，是一件好的事情，现在互联网界都在向AI和大数据不断的倾斜资源，大数据目前对我来说是一个不错的入口和选择&lt;/p&gt;

&lt;h2 id=&quot;数仓的困惑&quot;&gt;数仓的困惑&lt;/h2&gt;
&lt;p&gt;数仓的内容，目前大都是雪花、星型的数仓模型，大部分的例子都是电商系统，维度相对比较清晰，尤其是国内阿里的大范围应用和推广，基本上查不到别的案例了。&lt;/p&gt;

&lt;p&gt;而在实际的工作中，和电商系统的数仓模型差异较大，生搬硬套实在是不行，故公司的数仓建设实在让人汗颜，基本上就是简单的ODS后，抽象了下DWD，数据产品都是从DWD层获取数据，也没有其他清晰的层次概念，每次开发新的数据指标时，感觉都是烟囱式开发，所有的表从需要再建立，大量的重复重复&lt;/p&gt;

&lt;p&gt;想进行更好的优化，但找不到方向，也不知道其他公司有什么先进的经验。近期想找一些做的资深的，其他公司的一些人进行咨询，效果如何还未知，交流一下还是好的&lt;/p&gt;

&lt;p&gt;阿里在输出自己的数据演进时，写了一些书籍，抽象了OneData、OneService的概念，但书上写出的略少，并没有完全的将一些细节展现出来，和其他同事交流，实际内部也存在边界不清晰，大量的重复开发情况。数仓也是一个不断演进和发展的&lt;/p&gt;

&lt;h2 id=&quot;分析工具&quot;&gt;分析工具&lt;/h2&gt;
&lt;p&gt;今年公司需要补齐数据上的短板，不断的调整DS、DE、DA的一些部门关系，试图理清楚，人可能还好里一些，因为工作职责相对确定，但数据分析产品的边界却没有那么清晰，尤其是在一些混乱的规划下，一个图例将本清晰的事物描述的云里雾里，似乎不复杂就不能表现出自己的能力&lt;/p&gt;

&lt;p&gt;诚然，在做事情前需要有个明确和清晰的规划，需要想清楚，但有的时候站的不够高也基本上不会去想那些事情，国内还是屁股决定脑袋的氛围，还是想多思考一些，找一些人来进行访谈吧&lt;/p&gt;

&lt;h2 id=&quot;数学&quot;&gt;数学&lt;/h2&gt;
&lt;p&gt;继续不断的去看，啃这块最难啃的骨头&lt;/p&gt;
</description>
        <pubDate>Sun, 19 May 2019 00:00:00 +0800</pubDate>
        <link>http://www.svenyang.com/2019/05/19/dw/</link>
        <guid isPermaLink="true">http://www.svenyang.com/2019/05/19/dw/</guid>
        
        <category>随笔</category>
        
        
      </item>
    
      <item>
        <title>短板</title>
        <description>&lt;p&gt;近期感觉到短板越来越严重，不是能力上的，而是学历上的&lt;/p&gt;

&lt;p&gt;现在做的事情，需要较强的数学能力，数学公式，数学的简化，可能大数据不需要这些，但是多多少少有一些关系吧&lt;/p&gt;

&lt;p&gt;我也不清楚为什么上了大学数学会变得那么差劲，以前觉得有几种可能&lt;br /&gt;
	1. 高三的时候DHA吃的太多了，实际上还是有影响&lt;br /&gt;
	2. 高中填鸭式的教学方法，到了大学需要不断的自学不适应&lt;br /&gt;
	3. 大学的知识都是抽象的，数学学到了以后都不知道有什么用处，所以根本就没有学懂&lt;/p&gt;

&lt;p&gt;具体是什么原因我也不知道了，高考接近满分但是大学数学学的一塌糊涂，虽然知道以后可能会用到，但是那么多年都过来了，已经基本习惯了。但是现在需要用起来的时候，发现这个短板太严重了&lt;/p&gt;

&lt;p&gt;前几天听逻辑思维，里面有几集是关于数学猜想的，确实像是很多人说的，数学是聪明人的游戏，因为抽象的思维，真的很重要&lt;/p&gt;

&lt;p&gt;近期也在看数学之美  &lt;img src=&quot;https://gss0.bdstatic.com/94o3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=7b2e30a1a08b87d6444fa34d6661435d/203fb80e7bec54e7fee3988eb8389b504fc26a17.jpg&quot; alt=&quot;数学之美&quot; /&gt;&lt;/p&gt;

&lt;p&gt;看到实际很多的数据是如何应用的，然后再去深究实际的推导和基本公式。以前买了两本的数学书还是能排上用场的，拿出来再看看吧&lt;/p&gt;

&lt;p&gt;确实，在代码中，有比较多的逻辑，如果经过数学的简化，会将过程变得很&lt;strong&gt;优美&lt;/strong&gt; ，是的，非常优美，否则按照原有的逻辑进行一步步的堆砌，会变得非常复杂，我已经有过这种经历了&lt;/p&gt;

</description>
        <pubDate>Sun, 06 May 2018 00:00:00 +0800</pubDate>
        <link>http://www.svenyang.com/2018/05/06/math/</link>
        <guid isPermaLink="true">http://www.svenyang.com/2018/05/06/math/</guid>
        
        <category>随笔</category>
        
        
      </item>
    
      <item>
        <title>半年之后</title>
        <description>&lt;p&gt;不知不觉，又半年过去了，最初的成长也慢慢的变缓了，刚到一个陌生环境的不熟悉变为熟悉，新技术栈到来的恐慌也安然度过，也在不断的思考自己的优缺点，尤其是在这个年纪，是否有匹配的工作与能力，以后需要做什么，可能做什么。有的时候还是不知所措&lt;/p&gt;

&lt;h1 id=&quot;开源&quot;&gt;开源&lt;/h1&gt;
&lt;p&gt;大量接触开源的组件，也对开源组件的流程及规范慢慢的熟悉与了解，但仅是接触和使用，没有深层次代码细节掌握，不过，现在使用到这些的地方也就剩下了面试吧，面试最多的就是问别人paxos协议、HA的通用思考方向和做法、MySQL Binlog同步设计思想。&lt;/p&gt;

&lt;p&gt;有时候觉得很无趣，自己的眼界还是偏窄，面试的时候去问面试者，从他们的口中听到各式各样的回答，不知是悲哀还是无奈。&lt;/p&gt;

&lt;p&gt;悲哀的是很多人从来不关注这些，似乎永远都是别人去贡献，也不用自己去思考，就算看过也记不住&lt;br /&gt;
无奈的是在绝大多数中国公司内，基本不会把这些做一个深入的研究，较好的还是利用别人的思想重写开源的组件&lt;/p&gt;

&lt;h1 id=&quot;时间&quot;&gt;时间&lt;/h1&gt;
&lt;p&gt;来了北京，整个城市给人不同的感觉，一部分人醉生忘死，一部分人辛苦劳作，一部分人就像是天才划过天际，一个部分就成为冉冉的新星。城市有太多的人口，有一定的包容性，但更多的感觉是枯树上冒出较多的新芽&lt;/p&gt;

&lt;p&gt;健身也有半年时间了，原以为健身的人不会很多，后来才发现，可能知识层次越高，对于自我健康水平要求越多。以前很多人都说越是老板越忙，越富有的人越没有时间。曾经不以为然，但实际上越来越深入的了解到，确实如此，可能我曾经电视看的太多了吧，感觉有了较多收入以后，工作和事情就会变得很简单，但实际上确实刚好相反。&lt;/p&gt;

&lt;p&gt;需要思考的事情，需要阅读的书籍，需要掌握的知识，需要强健的体魄，需要优秀的管理能力，每件事情上都需要投入大量的时间和精力，而不是撒手当个掌柜的（很不负责任）。恩，忽然想起，前面漏了一个最大的时间消耗品，社交，可能也正是我最最缺乏的。必要的社交与人际沟通&lt;/p&gt;

&lt;p&gt;我浪费了很多时间，以前那些时间消耗在微博、微信、网页还有其他的零散地方上，那些东西对于自己的成长没有好处，或许就是一些茶余饭后的谈资罢了。如果将大量时间浪费在这里，感觉就已经是在养老了，因为现在年龄较大的人才会这样，这些都算是快速消费的知识吧&lt;/p&gt;

&lt;p&gt;需要养成良好的习惯，健身，看书，必要的社交和人脉的建立&lt;/p&gt;

&lt;h1 id=&quot;反思&quot;&gt;反思&lt;/h1&gt;
&lt;p&gt;在新加坡的Garena待了快一年的时间，对于公司状态的不满没有成为我思考的动力及改进自己的催化剂，反而成为我慵懒的借口。曾经思考过如果我是CTO，应该如何的去推动公司的发展，但每个点都很散，没有一套系统的体系，似乎自己知道很多，但实际上都是半吊子&lt;/p&gt;

&lt;p&gt;需要思考，如果自己真的在这个职位上，需要做什么，沿着怎样的一条路不断的演进和发展。或许，近期公司的一些变动可以给我一些借鉴，让我有一些参考或者能够系统的学习一下，看下别人是如何做到的&lt;/p&gt;

&lt;h1 id=&quot;阅读&quot;&gt;阅读&lt;/h1&gt;
&lt;p&gt;买了新的kindle以后，需要持续保证阅读的习惯，尤其是利用碎片的时间，多看一些书，也可以从别人那边借一些纸质书来看看&lt;/p&gt;

&lt;p&gt;近期看了一些杂文和小说，比如《追风筝的人》、《我的黄金时代》、《沉默的大多数》、《摆渡人》，有些心灵上的震撼和对于传统文学颠覆的震惊，原来还可以这样写，哈哈，可能我还是对于中国的当代文学看的比较少吧&lt;/p&gt;

&lt;p&gt;好吧，以后还是需要坚持下记录的习惯，不能总是三天打鱼两天晒网的&lt;/p&gt;
</description>
        <pubDate>Sat, 07 Apr 2018 00:00:00 +0800</pubDate>
        <link>http://www.svenyang.com/2018/04/07/half_year/</link>
        <guid isPermaLink="true">http://www.svenyang.com/2018/04/07/half_year/</guid>
        
        <category>随笔</category>
        
        
      </item>
    
      <item>
        <title>入职随笔</title>
        <description>&lt;p&gt;很久又没有写一些随笔了，最近有些忙，又有些迷茫，协议栈切换带来了很多的不适应，但四周过去了，不适应已经有所缓解&lt;/p&gt;

&lt;p&gt;刚刚翻日历，才发现，我入职新公司已经四周了，时间过得好快。就像我在新加坡一样，不知不觉待了10个月，时光如梭，有的时候也觉得自己一直还年轻，但是加班的时候，才发现，自己已经无法像以前一样加班到很晚&lt;/p&gt;

&lt;p&gt;6月底的时候，在新加坡有次通宵，做项目做到凌晨8点才去睡觉，过了好几天才缓过来，而在3月份泰国服务器上线的时候，每天基本上都是凌晨3点多睡觉，不过是持续一周睡得晚起来晚，没什么特别的感觉&lt;/p&gt;

&lt;h2 id=&quot;说说技术&quot;&gt;说说技术&lt;/h2&gt;
&lt;p&gt;在这边，技术用的相对自由，感觉这个也是目前中小公司的通性，项目要求快，所以开源技术用的非常多，而较多的技术，不管是在腾讯还是Garena，我都是听说，很少使用，主要还是自己做一些东西，不太依赖外部的事物&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;zk&lt;br /&gt;
kafka&lt;br /&gt;
java spring mvc&lt;br /&gt;
grpc&lt;br /&gt;
Redis&lt;br /&gt;
open-falcon&lt;br /&gt;
Grafana&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;基本上也就是这些，从应用程序框架，到rpc，到一些日志输出和配置管理，都是用开源的东西去搭建，反正能用，出现了问题再去修改。这些技术，有些我用过，但更多的还是没有使用过，从新加坡离职前，使用Redis、Open-Falcon、Grafana比较多，zk也是看了但是尚未开始用，只是做好了计划要求利用zk进行配置管理。&lt;/p&gt;

&lt;p&gt;周边的系统还好，最要命的是java的应用程序框架，刚拿到代码，傻眼了，注入、拦截、过滤，这都什么东西，java语言本身我会一些，但是框架，额，完全两眼一抹黑，不断的看书查资料加上代码对比，框架的东西理解了一些，但java1.8的高级新特性，我也没有了解，stream、lamada表达式，说起来都是一把辛酸泪，被坑的比较惨&lt;/p&gt;

&lt;p&gt;回想四周，每周都有进步，每周有学到新的东西，本周的时间，基本上是将spring框架的注入、拦截器搞清楚了，并且也自己写了一些代码；还有在看代码写逻辑的时候，将stream的一些常见用法搞的比较清楚，无非还是那些lamada表达式，入参和返回，现在用的还是比较顺手的，不过代码的可读性，就。。。写java的人我觉得都应该懂得&lt;/p&gt;

&lt;h2 id=&quot;健身&quot;&gt;健身&lt;/h2&gt;
&lt;p&gt;来了北京以后，经常去健身了，如果不去健身，真不知道我的身体会哪天垮掉，颈椎、腰部的问题都比较多，运动后有了很大的环节，并且运动完以后还很精神，肚子开始减小了~~~~&lt;/p&gt;

&lt;p&gt;希望能坚持下去吧，已经坚持了3周了☺&lt;/p&gt;

&lt;h2 id=&quot;后续工作&quot;&gt;后续工作&lt;/h2&gt;
&lt;p&gt;把每个事情都搞清楚，除本身的事情外，周边系统，推荐，大数据的简单知识都需要知道一些，能深入了最好~&lt;/p&gt;

&lt;h1 id=&quot;加油&quot;&gt;！&lt;strong&gt;加油&lt;/strong&gt;&lt;/h1&gt;

</description>
        <pubDate>Sun, 20 Aug 2017 00:00:00 +0800</pubDate>
        <link>http://www.svenyang.com/2017/08/20/new_job/</link>
        <guid isPermaLink="true">http://www.svenyang.com/2017/08/20/new_job/</guid>
        
        <category>随笔</category>
        
        
      </item>
    
      <item>
        <title>关于运维</title>
        <description>&lt;p&gt;近期被线上系统运营搞得焦头烂额，究其原因，是因为没有对运维工作作出足够的重视，结果在越南的运营中持续出现事故，不论是人为事故还是越南本身网络环境差导致的问题。 在公司产品做大并且做成熟以后，服务的可用率更加重要，需要通过运维和程序上若干手段去保证，谈谈笔者面临的问题及一些思考&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;先罗列出问题&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;事故原因&quot;&gt;事故原因&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;nginx配置错误&lt;/li&gt;
  &lt;li&gt;域名解析配置错误&lt;/li&gt;
  &lt;li&gt;证书配置错误&lt;/li&gt;
  &lt;li&gt;网络被切断&lt;/li&gt;
  &lt;li&gt;机器被重启&lt;/li&gt;
  &lt;li&gt;服务单点&lt;/li&gt;
  &lt;li&gt;服务器带宽没有按照要求配置&lt;/li&gt;
  &lt;li&gt;ffmpeg运行错误后没有及时拉起&lt;/li&gt;
  &lt;li&gt;磁盘满&lt;/li&gt;
  &lt;li&gt;内存满&lt;/li&gt;
  &lt;li&gt;带宽满&lt;/li&gt;
  &lt;li&gt;机房外网被切断&lt;/li&gt;
  &lt;li&gt;机房内部网络异常&lt;/li&gt;
  &lt;li&gt;等等&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;事故出现了很多次，部分事故提出明确整改方案，但大部分的事故仍然缺乏总结和改进的有效手段。因为缺乏必要的运维工具及监控统计手段，理想情况下所有的事故都可以通过测试手段、监控手段能及时感知到，配合合适的调度等运维工具，可以快速的解决事故点恢复系统运营&lt;/p&gt;

&lt;p&gt;理想下的系统运营包含以下几个手段和方案&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;发布系统&lt;br /&gt;
  发布系统是系统稳定运行的基础，不能只依靠人去做服务器发布，尽量使用可靠和有效的手段来自动化持续集成和进行发布，目前开源的合适方案为Jekins + ansible playbook&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;进程目录树&lt;br /&gt;
  将服务器运行的进程有效的管理，对服务器和程序进行有效的分类，和发布系统进行配合，并且在系统监控和告警上，能够更加有针对性&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;系统标准化&lt;br /&gt;
  或许会奇怪为什么会提出这点，主要原因是差异化的系统，给扩容、监控带来了非常多的问题，如网卡名出现了较多的p1p1/p1p2/p2p1/p2p2/em1/eth1等，使用网卡流量监控时，除非对每个网卡进行上报，但上报以后需要进行合适的汇总，监控视图上的差异也会非常大，视图查看时需要逐个输入网卡名。系统标准化也是目前docker大行其道的原因&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;系统级监控&lt;br /&gt;
  包括但并不限于对服务器的系统属性进行监控和告警，包括cpu、网卡、出入带宽、包量、tcp/udp链接情况、内存和磁盘使用率，这些属于系统基础性监控，如果系统出现瓶颈，最先就会出现及时的告警，并且通过查看视图能够进行快速定位。目前越南运维过程中，就严重缺乏这点，出现问题后，只能通过被动反馈后，逐个登陆服务器进行筛查，而缺乏视图和基础告警快速定位。该系统级监控开源的实现方案为Open-Falcon，或者通过Jekins和snmp自行实现（open-falcon有若干bug，需要进行修改）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;应用程序监控&lt;br /&gt;
  应用程序监控需要增加及时，当新的程序发布时，系统视图需要及时进行展示。事故经常在新发布代码的时候出现，如果缺乏对新功能的有效监控，无法及时感知问题发生，也就无法及时对程序进行回滚。目前有较多公司采用开源的influxdb + grafana的方案，但influxdb属于时间序列数据库，一般程序还是跑log后写入，缺乏及时性，并且grafana的视图及告警需要进行配置，较为麻烦和复杂，建议采用open-falcon的方案&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;脚本管理系统&lt;br /&gt;
  脚本管理系统可以和发布系统、进程目录树配合使用，该系统的必要性存在于对服务进行脚本运算，服务监控、拉起、定期删除、日志压缩等任务，如果运维或者程序员自行管理脚本，代价和复杂度较高，使用系统管理起来较为有必要。一般来说，成熟的系统，都需要有以下一些脚本
    &lt;ul&gt;
      &lt;li&gt;发布脚本&lt;/li&gt;
      &lt;li&gt;进程拉起脚本&lt;/li&gt;
      &lt;li&gt;日志压缩脚本&lt;/li&gt;
      &lt;li&gt;删除文件脚本&lt;/li&gt;
      &lt;li&gt;定期事物运行脚本&lt;/li&gt;
      &lt;li&gt;告警脚本&lt;/li&gt;
      &lt;li&gt;机器重启拉起脚本&lt;/li&gt;
      &lt;li&gt;其他&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;调度系统&lt;br /&gt;
  有较多的公司在初创时没有该系统，该系统主要目的是实现网络异常或服务器异常的调度，为了分布式计算或运维而实现，必要性毋庸置疑。目前较多的实现可以是zookeeper，或者是按照ack数据包做简单的hash一致性实现。但服务器的可用性、机器的可用性和服务器的负载均衡，其实都可以用该系统进行实现。我们也踩过若干次此坑，但因为公司没有成熟的调度系统，机器故障等大部分还是依靠运维的手工介入~~~原始&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;结束&quot;&gt;结束&lt;/h2&gt;
&lt;p&gt;暂时就想到了这些，因为缺乏，才凸显的更加重要和必要，在公司规模和用户量小的情况下，部分系统没有必要，但是一旦上了规模，可能会发生的事故一定会发生，因为大规模并发会放大事故出现概率&lt;/p&gt;

&lt;p&gt;公司快上市了，可这些东西都非常欠缺，只能说这个公司是一个合格的商业公司，却不是合格的技术公司，在缺乏充分竞争的情况下商业运作是ok的，但如果竞争激烈，技术的短板也会体验，从而影响公司的整体情况。&lt;/p&gt;

&lt;h2 id=&quot;over&quot;&gt;Over&lt;/h2&gt;
</description>
        <pubDate>Sat, 15 Apr 2017 00:00:00 +0800</pubDate>
        <link>http://www.svenyang.com/2017/04/15/DevOps/</link>
        <guid isPermaLink="true">http://www.svenyang.com/2017/04/15/DevOps/</guid>
        
        <category>运维</category>
        
        
      </item>
    
      <item>
        <title>Project_management</title>
        <description>&lt;h3 id=&quot;序言&quot;&gt;序言&lt;/h3&gt;
&lt;p&gt;东南亚人口红利刚刚在慢慢爬升，随着经济的迅速发展，对于移动互联网有着天然的亲和度和接受度，较多的产品可以在东南亚市场中进行试水，并能取得一定的成功。&lt;/p&gt;

&lt;p&gt;但这片市场受到越来越多的全球性企业的关注，会由无竞争市场变成充分竞争市场，一旦出现市场竞争，一个富有战斗力的团队的价值会更加凸显。&lt;/p&gt;

&lt;h3 id=&quot;技术方向&quot;&gt;技术方向&lt;/h3&gt;
&lt;p&gt;对于需要快速上线产品的市场，快比一切都重要，但是需要合理的快，并且快的有价值，不出错，实际上对于很多的创业公司带来较大的挑战。产品的快速迭代上线，如果品控把握不好，当竞品出现时，很可能因为品控的问题导致产品失败。&lt;/p&gt;

&lt;p&gt;特别当有了成熟框架、组件及运维体系的情况下，能够加速开发，缩短产品上线周期，并且对于运维、品控来说会有较大的好处，也容易形成产品需求提出、开发、测试、发布、用户反馈这样的闭环体验。&lt;/p&gt;

&lt;p&gt;打造一个合适的技术架构、组件不是一朝一夕能够完成的，投入少量资源选择一个合适的切入点尤为重要。&lt;/p&gt;

&lt;p&gt;一个完整典型的构架体系，分为多个层级&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;操作系统及运行环境
    &lt;ul&gt;
      &lt;li&gt;操作系统 —— 统一的操作系统内核，保证团队间的环境一致，并且资源池（提前准备好的机器，可随时扩容给需要的服务）的机器状态也一致&lt;/li&gt;
      &lt;li&gt;运行环境 —— 保证系统库状态一致，避免运行库版本不一致导致的异常问题&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;程序框架
    &lt;ul&gt;
      &lt;li&gt;通常为了简化程序开发，将程序的网络通信接口或者服务单独剥离出来，开发者只需要编写服务相关的代码。如python的django、flask，java的spring框架等&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;程序应用层
    &lt;ul&gt;
      &lt;li&gt;即当使用程序框架时，开发者需要编写的应用相关代码&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;监控
    &lt;ul&gt;
      &lt;li&gt;机器数据监控
        &lt;ul&gt;
          &lt;li&gt;网卡流量、包量&lt;/li&gt;
          &lt;li&gt;内存使用率&lt;/li&gt;
          &lt;li&gt;cpu使用率&lt;/li&gt;
          &lt;li&gt;IO使用率&lt;/li&gt;
          &lt;li&gt;机器负载&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;应用数据监控
        &lt;ul&gt;
          &lt;li&gt;由开发者自己指定的数据上报项&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;告警
    &lt;ul&gt;
      &lt;li&gt;针对应用程序指标，发现异常时进行的告警。需要尽量简化程序开发工作，复杂的开发会导致大量需要增加搞定的地方无法增加，或者因为麻烦而不愿意增加。但会影响到系统的稳定性以及是否能及时发现异常。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;统计
    &lt;ul&gt;
      &lt;li&gt;将监控数据项进行汇总，或通过日志输出的方式，计算出业务的相关指标，提供给产品及老板作为参考。如活跃度计算、地域聚集性计算，版本更新计算等其他数据&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;log上报
    &lt;ul&gt;
      &lt;li&gt;下发指令给客户端，要求将客户端的日志上报到服务器。前后端同事可以迅速的定位问题&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;crash上报
    &lt;ul&gt;
      &lt;li&gt;iOS及Android产生的crash信息，可以有效的将crash堆栈信息上报至服务器，由服务器汇总各个版本的crash情况，并给出分析指标和路径&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;日志输出
    &lt;ul&gt;
      &lt;li&gt;服务端将相关的数据通过日志方式进行输出，由数据统计人员进行分析并入库&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;现状&quot;&gt;现状&lt;/h3&gt;
&lt;p&gt;相对而已，上面所讲述的各个点都有一些开源软件可以使用&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;nagios作为基本的机器属性监控&lt;br /&gt;
influxdb作为log数据存储&lt;br /&gt;
grafana作为数据展示平台&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;但这几个工具的易用性明显不足，可用，但不好用，导致在开发时期无法关注到核心的数据和指标&lt;/p&gt;

&lt;h3 id=&quot;短期可实现内容&quot;&gt;短期可实现内容&lt;/h3&gt;
&lt;p&gt;基本的组件——agent+api，可用于监控统计、负载均衡、配置管理&lt;br /&gt;
已有模型（模型图）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;优点
    &lt;ul&gt;
      &lt;li&gt;简单、高效&lt;/li&gt;
      &lt;li&gt;易于开发维护&lt;/li&gt;
      &lt;li&gt;对程序员友好&lt;/li&gt;
      &lt;li&gt;可扩展性好&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;缺点
    &lt;ul&gt;
      &lt;li&gt;基础代码关键&lt;/li&gt;
      &lt;li&gt;前期需要前端页面投入&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;周期
    &lt;ul&gt;
      &lt;li&gt;agent基本组件——3人周&lt;/li&gt;
      &lt;li&gt;api——1人周&lt;/li&gt;
      &lt;li&gt;数据入库——1人周&lt;/li&gt;
      &lt;li&gt;数据展示——不定&lt;/li&gt;
      &lt;li&gt;数据告警配置整理输出——1人周&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 17 Dec 2016 00:00:00 +0800</pubDate>
        <link>http://www.svenyang.com/2016/12/17/project_management/</link>
        <guid isPermaLink="true">http://www.svenyang.com/2016/12/17/project_management/</guid>
        
        
      </item>
    
      <item>
        <title>Ansible记录</title>
        <description>&lt;h3 id=&quot;引&quot;&gt;引&lt;/h3&gt;
&lt;p&gt;机器数量越多越多的时候，对于机器的管理就存在较大问题，尤其是慵懒的程序员来说，在缺乏运维的情况下，自己动手去搞一系列部署、发布修改配置有的时候就是噩梦，自己写expect有的时候考虑不到一些边界条件，或者临时想做什么事情，再去写脚本已经来不及，所以经常抓瞎&lt;/p&gt;

&lt;p&gt;楼主从腾讯离职后，以前使用的脚本扔到跳板机上了，没有保存在自己的电脑上，所以就全丢了。。。（傻逼了吧）不过也很久没用过了&lt;/p&gt;

&lt;p&gt;来了新公司，写一些代码部署，修改，等操作，机器量越来越多，伪创业公司缺乏统一完善的运维环境和人员，所以很多事情为了靠谱起见还是自己搞吧（被公司坑若干次）&lt;/p&gt;

&lt;p&gt;搜索到现在较多运维用的Ansible，觉得不错，符合以前的使用习惯，并且能很快上手，复杂简单的功能均可实现，并且用python写的，以后可以尝试自己加功能，so，昨晚简单的用了下，记录下Ansible基本规则，忘记的时候出来翻翻&lt;/p&gt;

&lt;h3 id=&quot;安装与依赖&quot;&gt;安装与依赖&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;yum install ansible&lt;br /&gt;
brew install ansbile&lt;br /&gt;
apt-get install ansible&lt;br /&gt;
pip install ansible&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;** 依赖于yaml配置，python库（用python写的）**&lt;/p&gt;

&lt;h3 id=&quot;原理&quot;&gt;原理&lt;/h3&gt;
&lt;p&gt;就是一个ssh，expect连上远程服务器后操作，因为是ssh，所以比较慢，还没深究是串行操作还是并行，如果服务器数量很多，几千台的规模，不建议用ssh方式管理主机。自己写agent，毕竟规模那么大了，怀念最初的TAF、以及SPP、SF2，虽然几年没用过了，毕竟框架算是先进生产力&lt;/p&gt;

&lt;h3 id=&quot;连接&quot;&gt;连接&lt;/h3&gt;
&lt;p&gt;用ssh连接，自然涉及到登陆密码或者ssh rsa的免密登陆&lt;br /&gt;
要是有密码，可以在hosts列表中写；如果没有密码，那简单了，hosts啥也不用配置，用户名正确就可以，然后在配置中关闭key提示选项&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;host_key_checking=false&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;运行方式&quot;&gt;运行方式&lt;/h3&gt;
&lt;p&gt;描述的比较简单，因为昨晚半夜3点中看了一眼，先这么简单用吧&lt;br /&gt;
ansible依赖&lt;strong&gt;配置文件&lt;/strong&gt;和&lt;strong&gt;主机列表&lt;/strong&gt;才能运行&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;编译配置文件
 	- mac的目录为/usr/local/etc/ansible/，文件名为ansible.cfg，可以按照网上的说法仅填写几个选项，或者从安装包中复制&lt;br /&gt;
楼主就写了三个选项&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  [defaults]  
  remote_post=22  
  private_key_file=~/.ssh/id_rsa  
  host_key_checking=false  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;编译主机列表&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;主机列表和配置文件同样目录，文件名为hosts，或者自己随便写（运行的时候需要-i指定目录），写法如下&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  #分类名，运行ansible写分类名就意味着对别名下面的列表都进行操作，写url应该也可以，不过没用过，不乱说
  [name]
  #最简单的写法，ip+ssh用户名
  127.0.0.1 ansible_ssh_user=***  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;blockquote&gt;
      &lt;p&gt;如果觉得不过瘾，想写多一些参数，看&lt;a href=&quot;http://docs.ansible.com/ansible/intro_inventory.html&quot;&gt;http://docs.ansible.com/ansible/intro_inventory.html&lt;/a&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;运行&quot;&gt;运行&lt;/h3&gt;
&lt;p&gt;基本的命令&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ansible name -m shell -a &apos;ls /var/log/&apos;  
ansible name -m command -a &apos;ls&apos;  
ansible name -m script -a &apos;~/run.sh&apos;
ansible name -m copy -a &apos;src=~/aaa.txt dst=~/aaa.txt mode=644 owner=root&apos;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;name就是前面那个分类名&lt;/li&gt;
  &lt;li&gt;-m后面跟着方法，可以有shell或者command，或者script
    &lt;ul&gt;
      &lt;li&gt;shell好用，因为支持管道，所以基本的命令不会出错&lt;/li&gt;
      &lt;li&gt;command，简单的单个命令还行&lt;/li&gt;
      &lt;li&gt;script，复杂的还是写个shell吧，看ansible说复杂的可以用ansible的playbook语法写，但是没必要再去熟悉一个脚本语言吧，如果shell可以简单实现的话&lt;/li&gt;
      &lt;li&gt;copy，复制文件专用&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;-a 后面跟着命令或者是脚本的路径（-m script)&lt;br /&gt;
  &lt;strong&gt;部分情况下，命令需要使用shell执行，因为command不能用管道，所以会出错&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;差不多就这些了，反正网上文档一大堆，google一下或者直接去ansible的doc文档看，更直接&lt;/p&gt;

&lt;p&gt;over&lt;/p&gt;
</description>
        <pubDate>Sat, 10 Dec 2016 00:00:00 +0800</pubDate>
        <link>http://www.svenyang.com/2016/12/10/ansible_config/</link>
        <guid isPermaLink="true">http://www.svenyang.com/2016/12/10/ansible_config/</guid>
        
        <category>运维</category>
        
        
      </item>
    
  </channel>
</rss>
